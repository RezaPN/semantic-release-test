{
  "plugins": [
    "@semantic-release/changelog",
    "@semantic-release/npm",
    [
      "@semantic-release/commit-analyzer",
      {
        "preset": "angular",
        "releaseRules": "./config/release-rules.cjs",
        "parserOpts": {
          "noteKeywords": ["BREAKING CHANGE", "BREAKING CHANGES"]
        }
      }
    ],
    [
      "@semantic-release/release-notes-generator",
      {
        "writerOpts": {
          "transform": "module.exports = (commit, context) => { const issues = []; commit.notes.forEach(note => { note.title = 'BREAKING CHANGES'; }); if (commit.type === 'feat') { commit.type = 'Features'; } else if (commit.type === 'fix') { commit.type = 'Bug Fixes'; } else if (commit.type === 'update') { commit.type = 'Updates'; } else if (commit.type === 'perf') { commit.type = 'Performance Improvements'; } else if (commit.type === 'revert') { commit.type = 'Reverts'; } else if (commit.type === 'docs') { commit.type = 'Documentation'; } else if (commit.type === 'style') { commit.type = 'Styles'; } else if (commit.type === 'refactor') { commit.type = 'Code Refactoring'; } else if (commit.type === 'test') { commit.type = 'Tests'; } else if (commit.type === 'build') { commit.type = 'Build System'; } else if (commit.type === 'ci') { commit.type = 'Continuous Integration'; } if (commit.scope === '*') { commit.scope = ''; } if (typeof commit.hash === 'string') { commit.shortHash = commit.hash.substring(0, 7); } if (typeof commit.subject === 'string') { commit.subject = commit.subject.substring(0, 72); } return commit; }"
        }
      }
    ],
    [
      "@semantic-release/git",
      {
        "assets": [
          "package.json",
          "yarn.lock",
          "CHANGELOG.md"
        ],
        "message": "chore(release): ${nextRelease.version}\n\n${nextRelease.notes}"
      }
    ]
  ],
  "preset": "angular"
}
